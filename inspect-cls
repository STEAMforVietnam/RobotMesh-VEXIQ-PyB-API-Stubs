#!/usr/bin/env python3


from argparse import ArgumentParser
from importlib import import_module
from inspect import (
    getfullargspec, getmembers,
    isdatadescriptor, isfunction,
    signature
)


arg_parser = ArgumentParser()
arg_parser.add_argument('class_qualname')
args = arg_parser.parse_args()


print(args.class_qualname)

module_name, class_name = args.class_qualname.rsplit('.', 1)
module = import_module(name=module_name)
cls = getattr(module, class_name)

print('\nProperties:')
for property_name, property in getmembers(cls, isdatadescriptor):
    if not property_name.startswith('_'):
        print(f"- {property_name}: {property.fget.__annotations__['return']}")

print('\nMethods:')
for method_name, method in getmembers(cls, isfunction):
    if not method_name.startswith('_'):
        print(f'\n- {method_name}{signature(method)}:'
              f'\n    {getfullargspec(method)}')
