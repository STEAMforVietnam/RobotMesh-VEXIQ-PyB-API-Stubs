"""Gyro Sensor."""


from collections.abc import Sequence
from typing import Literal, Self, overload

from abm.decor import act, sense

from .._abstract_device import Device
from ..brain.port import Ports
from .._common_enums import RotationUnits, DEGREES

from .._util.doc import robotmesh_doc, vexcode_doc

from .calibration import GyroCalibrationType


__all__: Sequence[str] = 'Gyro', 'GyroCalibrationType'


@robotmesh_doc("""
    robotmesh.com/studio/content/docs/vexiq-python_b/html/classvex_1_1_gyro.html
""")
class Gyro(Device):
    """Gyro Sensor."""

    @robotmesh_doc("""
        Creates a new gyro object on the port specified in the parameter.

        Parameters
        - index: index to the brain port.
        - calibrate: set to calibrate the sensor now
    """)
    def __init__(self, index: Ports, calibrate: bool = True, /):
        """Initialize Gyro Sensor."""
        self.port: Ports = index
        self.is_calibrated: bool = calibrate

        self._heading: dict[RotationUnits, float] = dict[RotationUnits, float]()  # noqa: E501
        self._rotation: dict[RotationUnits, float] = dict[RotationUnits, float]()  # noqa: E501

    def __eq__(self, other: Self) -> bool:
        """Check equality."""
        return (isinstance(other, type(self)) and
                (other.port == self.port) and
                (other.is_calibrated == self.is_calibrated))

    def __hash__(self) -> int:
        """Return integer hash."""
        raise hash((self.port, self.is_calibrated))

    @vexcode_doc("""
        Gyro Calibrate

        Calibrates a VEX IQ Gyro Sensor
        to reduce the amount of drift generated by the Gyro Sensor.

        Drifting occurs when the Gyro Sensor incorrectly detects movement
        even though the sensor is not moving.

        The Gyro Sensor must remain still during the calibration process.

        The TYPE parameter can be replaced with any of the following options
        to set the calibration duration of the Gyro Sensor:
        - GyroCalibrationType.NORMAL will calibrate for 2 seconds
        - GyroCalibrationType.SLOW will calibrate for 4 seconds
        - GyroCalibrationType.EXTENDED will calibrate for 8 seconds
    """)
    @act
    def calibrate(self,
                  type: GyroCalibrationType = GyroCalibrationType.NORMAL,
                  # pylint: disable=redefined-builtin
                  /):
        """Calibrate."""

    @robotmesh_doc("""
        Starts recalibration of the gyro.

        Parameters
        - gyroCalibrationType: amount of time for calibration,
                               GyroCalibrationType enum value.
        - waitForCompletion: wait for calibration to complete
    """)
    @act
    def start_calibration(
            self,
            gyroCalibrationType: GyroCalibrationType = GyroCalibrationType.QUICK,  # noqa: E501
            waitForCompletion: bool = True, /):
        """Start calibrating."""

    @robotmesh_doc("""
        Returns True while gyro sensor is performing a requested recalibration,
        changing to false once recalibration has completed.

        Returns True if gyro is still calibrating.
    """)
    @sense
    def is_calibrating(self) -> bool:
        """Check whether still calibrating."""

    @overload
    def set_heading(self, value: float, unit: Literal[DEGREES] = DEGREES, /):
        ...

    @overload
    def set_heading(self, value: float = 0,
                    rotationUnits: RotationUnits = RotationUnits.DEG, /):
        ...

    @robotmesh_doc("""
        Set the gyro sensor angle to angle.

        Parameters
        - value: new heading for the gyro
        - rotationUnits: rotation unit for the heading
    """)
    @vexcode_doc("""
        Gyro Set Heading

        Sets a VEX IQ Gyro Sensor's current heading to the specified heading.

        Gyro Set Heading can be used to set the gyro's position
        to a heading in the range of 0 to 359.99 degrees.

        This command is typically used to reset the orientation of the gyro
        when the heading is set to a value of 0.

        Gyro Set Heading can accept decimal or integer inputs.
    """)
    @act
    def set_heading(self, value: float, unit: Literal[DEGREES] = DEGREES, /):
        """Set heading angle."""
        self._heading[unit] = value

    @overload
    def set_rotation(self, value: float, unit: Literal[DEGREES] = DEGREES, /):
        ...

    @overload
    def set_rotation(self, value: float = 0,
                     rotationUnits: RotationUnits = RotationUnits.DEG, /):
        ...

    @robotmesh_doc("""
        Set the gyro sensor rotation to angle.

        Parameters
        - value: new absolute angle for the gyro
        - rotationUnits: rotation unit for the angle
    """)
    @vexcode_doc("""
        Gyro Set Rotation

        Sets a VEX IQ Gyro Sensor's current angle of rotation
        to the specified rotation.

        The Gyro Set Rotation command can be used to set a Gyro Sensor's
        angle of rotation to any given positive (counter-clockwise increasing)
        or negative (clockwise decreasing) value.

        Gyro Set Rotation accepts a range of any positive or negative decimal
        or integer as the specified ROTATION.
    """)
    @act
    def set_rotation(self, value: float, unit: Literal[DEGREES] = DEGREES, /):
        """Set rotational angle."""
        self._rotation[unit] = value

    @overload
    def heading(self, unit: Literal[DEGREES] = DEGREES, /) -> float:
        ...

    @overload
    def heading(self, rotationUnits: RotationUnits = RotationUnits.DEG, /) -> float:  # noqa: E501
        ...

    @robotmesh_doc("""
        Get the angle of the gyro sensor.

        Parameters
        - rotationUnits: measurement unit for the gyro device
    """)
    @vexcode_doc("""
        Gyro Heading

        Reports a VEX IQ Gyro Sensor's current heading in degrees.

        Gyro Heading reports a range of values from 0.00 to 359.99.

        The Gyro Heading command reports an increase in heading
        when rotating counter-clockwise.

        The Gyro Heading command reports a decrease in heading
        when rotating clockwise.
    """)
    @sense
    def heading(self, unit: Literal[DEGREES] = DEGREES, /) -> float:
        """Return heading angle."""

    @overload
    def rotation(self, unit: Literal[DEGREES] = DEGREES, /) -> float:
        ...

    @overload
    def rotation(self, rotationUnits: RotationUnits = RotationUnits.DEG, /) -> float:  # noqa: E501
        ...

    @robotmesh_doc("""
        Get the absolute angle of the gyro sensor.

        Parameters
        - rotationUnits: measurement unit for the gyro device
    """)
    @vexcode_doc("""
        Gyro Rotation

        Reports a VEX IQ Gyro Sensor's current rotation in degrees.

        Gyro Rotation reports an increasing value
        when the Gyro Sensor turns in the counter-clockwise direction.

        Gyro Rotation reports a decreasing value
        when the Gyro Sensor turns in the clockwise direction.
    """)
    @sense
    def rotation(self, unit: Literal[DEGREES] = DEGREES, /) -> float:
        """Return rotational angle."""

    @vexcode_doc("""
        Gyro Rate

        Reports a VEX IQ Gyro Sensor's rate of angular velocity.

        Gyro Rate reports a range of values between 0 to 249.99
        in degrees per second (DPS).
    """)
    @sense
    def rate(self) -> float:
        """Return angular velocity in DPS."""
