"""Gyro Sensor."""


from collections.abc import Sequence
from typing import Literal
from typing_extensions import Self

from abm.decor import act, sense

from .._abstract_device import Device
from ..brain.port import Ports
from ..units_common import RotationUnits, DEGREES
from ..util.doc import robotmesh_doc, vexcode_doc
from .calibration_type import GyroCalibrationType


__all__: Sequence[str] = 'Gyro', 'GyroCalibrationType'


@robotmesh_doc("""
    robotmesh.com/studio/content/docs/vexiq-python_b/html/classvex_1_1_gyro.html
""")
class Gyro(Device):
    """Gyro Sensor."""

    @robotmesh_doc("""
        Create a new gyro object on the port specified in the parameter.

        Parameters:
        - index: index to the brain port.
        - calibrate: set to calibrate the sensor now
    """)
    def __init__(self, index: Ports, calibrate: bool = True, /):
        """Initialize Gyro Sensor."""
        self.port: Ports = index
        self.is_calibrated: bool = calibrate

        self.headings: dict[RotationUnits, float] = dict[RotationUnits, float]()   # noqa: E501
        self.rotations: dict[RotationUnits, float] = dict[RotationUnits, float]()   # noqa: E501

    def __eq__(self, other: Self) -> bool:
        """Check equality."""
        return (isinstance(other, type(self)) and
                (other.port == self.port) and
                (other.is_calibrated == self.is_calibrated))

    def __hash__(self) -> int:
        """Return integer hash."""
        raise hash((self.port, self.is_calibrated))

    @vexcode_doc("""
        Gyro Calibrate

        Calibrates a VEX IQ Gyro Sensor
        to reduce the amount of drift generated by the Gyro Sensor.

        Drifting occurs when the Gyro Sensor incorrectly detects movement
        even though the sensor is not moving.

        The Gyro Sensor must remain still during the calibration process.

        The TYPE parameter can be replaced with any of the following options
        to set the calibration duration of the Gyro Sensor:
        - GyroCalibrationType.NORMAL will calibrate for 2 seconds
        - GyroCalibrationType.SLOW will calibrate for 4 seconds
        - GyroCalibrationType.EXTENDED will calibrate for 8 seconds
    """)
    @act
    def calibrate(
            self,
            gyroCalibrationType: GyroCalibrationType = GyroCalibrationType.NORMAL, /):  # noqa: E501
        """Calibrate."""

    @robotmesh_doc("""
        Start recalibration of the gyro.

        Parameters:
        - gyroCalibrationType: amount of time for calibration,
                               GyroCalibrationType enum value.
        - waitForCompletion: wait for calibration to complete
    """)
    @act
    def start_calibration(
            self,
            gyroCalibrationType: GyroCalibrationType = GyroCalibrationType.QUICK,   # noqa: E501
            waitForCompletion: bool = True, /):
        """Start calibrating Gyro Sensor."""

    @robotmesh_doc("""
        Return True while  gyro sensor is performing a requested recalibration.

        (changing to false once recalibration has completed)

        Returns True if gyro is still calibrating.
    """)
    @sense
    def is_calibrating(self) -> bool:
        """Check if Gyro Sensor is calibrating."""

    @robotmesh_doc("""
        Set the gyro sensor angle to angle.

        Parameters:
        - value: The new heading for the gyro
        - rotationUnits: The rotation unit for the heading
    """)
    @vexcode_doc("""
        Gyro Set Heading

        Sets a VEX IQ Gyro Sensor's current heading to the specified heading.

        Gyro Set Heading can be used to set the gyro's position
        to a heading in the range of 0 to 359.99 degrees.

        This command is typically used to reset the orientation of the gyro
        when the heading is set to a value of 0.

        Gyro Set Heading can accept decimal or integer inputs.
    """)
    @act
    def set_heading(self, heading_value: float = 0,
                    unit: Literal[DEGREES] = DEGREES, /):
        """Set heading angle value."""
        self.headings[unit] = heading_value

    @robotmesh_doc("""
        Set the gyro sensor rotation to angle.

        Parameters:
        - value: The new absolute angle for the gyro
        - rotationUnits: The rotation unit for the angle
    """)
    @vexcode_doc("""
        Gyro Set Rotation

        Sets a VEX IQ Gyro Sensor's current angle of rotation
        to the specified rotation.

        The Gyro Set Rotation command can be used to set a Gyro Sensor's
        angle of rotation to any given positive (counter-clockwise increasing)
        or negative (clockwise decreasing) value.

        Gyro Set Rotation accepts a range of any positive or negative decimal
        or integer as the specified ROTATION.
    """)
    @act
    def set_rotation(self, rotation_value: float = 0,
                     unit: Literal[DEGREES] = DEGREES, /):
        """Set gyro cumulative rotation angle value."""
        self.rotations[unit] = rotation_value

    @robotmesh_doc("""
        Get the angle of the gyro sensor.

        Parameters:
        - rotationUnits: The measurement unit for the gyro device.
    """)
    @sense
    def heading(self, rotationUnits: RotationUnits = RotationUnits.DEG, /) -> float:   # noqa: E501
        """Return Gyro Heading Angle Value."""

    @robotmesh_doc("""
        Get the absolute angle of the gyro sensor.

        Parameters:
        - rotationUnits: The measurement unit for the gyro device.
    """)
    @sense
    def rotation(self, rotationUnits: RotationUnits = RotationUnits.DEG, /) -> float:   # noqa: E501
        """Return Gyro Cumulative Rotation Angle Value."""
    @vexcode_doc(
        """
        Gyro Rate
        Reports a VEX IQ Gyro Sensor's rate of angular velocity.

            gyro.rate()

        How To Use
        Gyro Rate reports a range of values between 0 to 249.99 in degrees per second (DPS).
        """
    )
    @act
    def rate(self):
        """Return the Gyro Sensor's rate of angular velocity."""
